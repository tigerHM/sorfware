1.主从复制,读写分离
文章参考:
https://zhuanlan.zhihu.com/p/199217698
主从复制、读写分离就是为了数据库能支持更大的并发。

主从复制的原理
①当Master节点进行insert、update、delete操作时，会按顺序写入到binlog中。
②salve从库连接master主库，Master有多少个slave就会创建多少个binlog dump线程。
③当Master节点的binlog发生变化时，binlog dump 线程会通知所有的salve节点，并将相应的binlog内容推送给slave节点。
④I/O线程接收到 binlog 内容后，将内容写入到本地的 relay-log。
⑤SQL线程读取I/O线程写入的relay-log，并且根据 relay-log 的内容对从数据库做对应的操作。



查看数据库各表记录数：
use information_schema;
select table_name,table_rows from tables  where TABLE_SCHEMA = '数据库名字'  order by table_rows desc;

查看数据库表表所占的容量（表的数据和索引）：
select sum(DATA_LENGTH)+sum(INDEX_LENGTH) from information_schema.tables where table_schema='testdb';
得到的是字节为单位。



MVCC(Multi Version Concurrency Control的简称)，代表多版本并发控制。
参考文章：https://www.jianshu.com/p/f692d4f8a53e



在8.0后的mysql版本中，函数支持窗口函数：rank(),LEAD(),ROW_NUMBER()等.
官网通过比对版本的文档可以看到：
https://dev.mysql.com/doc/refman/5.7/en/

其它方式实现类似rank()功能的方法：
参考：https://www.jianshu.com/p/bb1b72a1623e

mysql实现排序：（使用的版本：5.7.31）
场景1.全局按某个字段排序,输出排名情况
SELECT emp_no, salary, from_date, @curRank := @curRank + 1 AS rank FROM salaries, (SELECT @curRank := 0) q ORDER BY salary;
得到如下：
+--------+--------+------------+------+
| emp_no | salary | from_date  | rank |
+--------+--------+------------+------+
|  10003 |  43311 | 2001-12-01 |    1 |
|  10002 |  72527 | 2001-08-02 |    2 |
|  10004 |  72527 | 2001-12-01 |    3 |
|  10001 |  88958 | 2002-06-22 |    4 |

场景2.按某个字段实现分组排序,输出排名情况
 SELECT t1.emp_no, t1.salary, t1.from_date,@rk := case  when  @com=emp_no then @rk + 1 else 1 end rank,@com := emp_no from\
 (select * from salaries group by emp_no,salary desc) t1,( SELECT @com := null, @rk := 0 ) t2;
得到如下：
+--------+--------+------------+------+----------------+
| emp_no | salary | from_date  | rank | @com := emp_no |
+--------+--------+------------+------+----------------+
|  10001 |  88958 | 2002-06-22 |    1 |          10001 |
|  10001 |  39043 | 2002-07-22 |    2 |          10001 |
|  10002 |  72527 | 2001-08-02 |    1 |          10002 |
|  10002 |  50633 | 2001-09-02 |    2 |          10002 |
|  10003 |  43311 | 2001-12-01 |    1 |          10003 |
|  10003 |  33225 | 2002-02-01 |    2 |          10003 |
|  10003 |  23999 | 2002-01-01 |    3 |          10003 |
|  10004 |  72527 | 2001-12-01 |    1 |          10004 |
|  10004 |  37528 | 2002-01-01 |    2 |          10004 |
|  10004 |  12322 | 2002-02-01 |    3 |          10004 |
+--------+--------+------------+------+----------------+



常见的约束：
参考文章：
https://blog.csdn.net/z_johnny/article/details/113820405
主要归类为列级约束和表级约束：

在 MySQL 中，主要有六种约束：
列级约束：NOT NULL | DEFAULT | PRIMARY KEY | UNIQUE | CHECK
表级约束：PRIMARY KEY | UNIQUE | CHECK | FOREIGN KEY
分析如下：
1、NOT NULL：非空约束，用于约束该字段的值不能为空。比如姓名、学号等。
2、DEFAULT：默认值约束，用于约束该字段有默认值，约束当数据表中某个字段不输入值时，自动为其添加一个已经设置好的值。比如性别。
3、PRIMARY KEY：主键约束，用于约束该字段的值具有唯一性，至多有一个，可以没有，并且非空。比如学号、员工编号等。
4、UNIQUE：唯一约束，用于约束该字段的值具有唯一性，可以有多个，可以没有，可以为空。比如座位号。
5、CHECK：检查约束，用来检查数据表中，字段值是否有效。比如年龄、性别。
6、FOREIGN KEY：外键约束，外键约束经常和主键约束一起使用，用来确保数据的一致性，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值。在从表添加外键约束，用于引用主表中某列的值。比如学生表的专业编号，员工表的部门编号，员工表的工种编号。
