常用命令
使用postman查询参考:
https://www.jianshu.com/p/98ea764d9612

使用curl 查询:
查询集群所有节点信息:
curl -XGET "ip:port/_cat/nodes?v

查询集群节点状态:
curl -XGET "ip:port/_cat/health?v

查询所有index:
curl -XGET "ip:port/_cat/indices?v"

查询几条数据(postman):
http://ip:port/test_avro-2020.08/_search
{
    "query":{
        "match_all":{}
    },
    "size":10
}

对数据进行分页:
{
    "query":{
        "match_all":{}
    },
   "from":40,
   "size":10
}


获取索引的映射(mapping):
在创建索引后,Elasticsearch为对字段类型进行猜测，动态生成了字段和类型的映射关系.字段类型的不同会导致查询结果的不同.
get http://ip:9200/log_avro-2020.08/_mapping


查询数据精确查询指定字段,结果按@timestamp倒序排列:
http://ip:9200/log_avro-2020.08.244/_search
{
    "query":{
        "match":{
            "id":20289
        }
    },
    "sort": { "@timestamp": { "order": "desc" }}
}



对数字字段进行范围查找:
url省略
{"query":{
		"filtered":{
			"filter":{
				"terms":{
					"event_time":[1600242507089,1600242557089]
					}
				}
			}
		},
		"size":10
	}


多词查询:
对title字段进行查询带"BROWN DOG!"
{"query": {
	"match": {
		"title": "BROWN DOG!"
		}
	}
}
得到的结果发现数据'title' 字段包含至少一个查询关键字的文档都被认为是符合查询条件.实际上,这样查询在内部会执行两个 term 查询并综合二者的结果得到最终的结果.
然而我们可能想得到包含所有查询关键字的文档.
这就涉及到精度控制.
添加参数:
"operator" ,默认值是"or",可以是"and"
{"query": {
	"match": {
		"title": {
			"query": "BROWN DOG!",
			"operator": "and"
			}
		}
	}
}
这样查询出来的文档,就必须全部包含所有的关键词才会出现在结果中.
match 查询有 'minimum_should_match' 参数，参数值表示被视为相关的文档必须匹配的关键词个数。参数值可以设为整数，也可以设置为百分数。



Spring boot操作ES文档案例:
对比curl代码和javaAPI:https://www.cnblogs.com/keatsCoder/p/11341835.html



