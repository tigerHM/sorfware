HIVE
hive的参考文档LanguageManual DML:
https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML#LanguageManualDML-Loadingfilesintotables

关于hive怎么加载json数据建表使用在文档:
https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL

json数据:每行必须是一个完整的JSON，一个JSON不能跨越多行.
json数据中的字段最好不要含有特殊符号或者以特殊符号开头的字段名;如:_和$. 会导致该列字段无法读取被null处理.

建表语句:
CREATE TABLE my_table(a string, b bigint, ...)ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe'STORED AS TEXTFILE;

1.示例:
json数据:
{"sid":"123","name":"himw","hoppy":["music","book"]}
{"sid":"421","name":"wak","hoppy":["music","foot bool"],"home":"sdna"}
{"sid":"121","name":"jack","hoppy":["movie","foot bool"],"home":"sdna"}
建表:TABLE my_table(id string, name string, hoppy array, home string)ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe' STORED AS TEXTFILE;
load  data local inpath "/.../..." into table 表名;
查询结果:
OK
123	himw	["music","book"]	NULL
421	wak	["music","foot bool"]	sdna
121	jack	["movie","foot bool"]	sdna


忽略掉格式错误的数据:
ALTER TABLE my_table SET SERDEPROPERTIES ( "ignore.malformed.json" = "true");

当你的json数据中包含hive关键字时，导入的数据会有问题，此时 SerDe可以使用SerDe属性将hive列映射到名称不同的属性:
CREATE TABLE my_table(id string, name string, hoppy array, home string)ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe' 
WITH SERDEPROPERTIES ("mapping.hive字段名"="json字段名") STORED AS TEXTFILE;

2.示例
json数据:
{"id":1,"name":"znk","course":{"chinese":"100","math":"80"}}
{"id":2,"name":"sdx","course":{"chinese":"66","math":"58"}}
{"id":3,"name":"sdf","course":{"chinese":"70","math":"90"}}

建表:CREATE TABLE my_table7(id int, name string, course struct<chinese:string,math:string>)ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe' 
STORED AS TEXTFILE;
load  data local inpath "/.../..." into table 表名;
查询全表:
1	znk	{"yuwen":"100","shuxue":"80"}
2	sdx	{"yuwen":"66","shuxue":"58"}
3	sdf	{"yuwen":"70","shuxue":"90"}
查询某个成绩:select course.math from 表名;
OK
80
58
90



在处理json数据字段长度不一致时,hive建表语句决定了对数据的处理情况.参考如下:
3.示例
json数据:
{"id":1,"name":"znk","course":{"chinese":"100","math":"80"}}
{"id":2,"name":"sdx","course":{"chinese":"66","math":"58"}}
{"id":3,"name":"sdf","course":{"chinese":"70","math":"90","english":"79"}}

建表A:CREATE TABLE my_table2 (id int, name string, course struct<chinese:string,math:string>) ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe' 
STORED AS TEXTFILE;
查询结果:
hive> select * from my_table2;
OK
1	znk	{"chinese":"100","math":"80"}
2	sdx	{"chinese":"66","math":"58"}
3	sdf	{"chinese":"70","math":"90"}

在建表语句中,没有对字段englishd的定义,有该字段的数据则自动忽略了.

建表B:CREATE TABLE my_table3 (id int, name string, course struct<chinese:string,math:string,english:string>) ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe' 
STORED AS TEXTFILE;
查询结果:
hive> select * from my_table3;
OK
1	znk	{"chinese":"100","math":"80","english":null}
2	sdx	{"chinese":"66","math":"58","english":null}
3	sdf	{"chinese":"70","math":"90","english":"79"}

在第二个建表语句中,对english字段定义了,部分数据缺失该字段则自动填充为null.



