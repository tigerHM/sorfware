[]里面的条件判断

1 字符串判断

str1 = str2　　　　　　当两个串有相同内容、长度时为真
str1 != str2　　　　　 当串str1和str2不等时为真
-n str1　　　　　　　 当串的长度大于0时为真(串非空)
-z str1　　　　　　　 当串的长度为0时为真(空串)
str1　　　　　　　　   当串str1为非空时为真

2 数字的判断

int1 -eq int2　　　　两数相等为真
int1 -ne int2　　　　两数不等为真
int1 -gt int2　　　　int1大于int2为真
int1 -ge int2　　　　int1大于等于int2为真
int1 -lt int2　　　　int1小于int2为真
int1 -le int2　　　　int1小于等于int2为真

3 文件的判断

-r file　　　　　用户可读为真
-w file　　　　　用户可写为真
-x file　　　　　用户可执行为真
-f file　　　　　文件为正规文件为真
-d file　　　　　文件为目录为真
-c file　　　　　文件为字符特殊文件为真
-b file　　　　　文件为块特殊文件为真
-s file　　　　　文件大小非0时为真
-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真

3 复杂逻辑判断

-a 　 　　　　　 与
-o　　　　　　　 或
!　　　　　　　　非

shell中的数组:
参考来源:http://blog.leanote.com/post/gaunthan/%E6%95%B0%E7%BB%84


Shell  数组操作方式
数组元素个数  ${#array[@]} 
数组的所有元素  ${array[*]} 
字符串长度      ${#str}


对数组中的元素去重:
array=($(echo ${array[*]} | sed 's/ /\n/g'|sort | uniq))
另一方法,参考:https://blog.csdn.net/hardwin/article/details/6826890


判断文件是否带后缀:
if [ "${file##*.}"x = "tmp"x ];then
    echo $file
fi
使用了贪婪匹配用法


遍历文件目录:
#! /bin/bash
    function read_dir(){
        for file in `ls $1`       #注意此处这是两个反引号，表示运行系统命令
        do
            if [ -d $1"/"$file ]  #注意此处之间一定要加上空格，否则会报错
            then
                read_dir $1"/"$file
            else
                echo $1"/"$file   #在此处处理文件即可
            fi
        done
    }   
    #读取第一个参数
    read_dir $1
参考:https://blog.csdn.net/Register_man/article/details/53860064


获取执行脚本所在的目录及其上级目录:
#!/bin/bash
cd "$(dirname "$0")"
PRO_HOME=`pwd`
echo ${PRO_HOME}
echo `dirname ${PRO_HOME}` 

获取脚本当前目录:
$(cd "${SCRIPT_DIR}" && pwd)

获取脚本当前目录的父目录:
$(cd "${SCRIPT_DIR}" && cd .. && pwd)



判断字符串中含有特殊符号：
思路：想要搜索一串字符character中是否存在某字符，然后直接echo指令，利用管道符号，直接搜索匹配的内容看有没有结果，-n string 如果 string 长度非零，则为真。
strA="待处理字符串"
result=$(echo $strA | grep "匹配内容") 
if [ -n "$result" ]; then
    echo "yes"
else
    echo "no"
fi
此外，"^"和"$"放在匹配内容的开头和结尾用来限定匹配内容在待处理字符串的行首和行尾。


shell 带$的变量说明：
$$ 
Shell本身的PID（ProcessID） 
$! 
Shell最后运行的后台Process的PID 
$? 
最后运行的命令的结束代码（返回值） 
$# 
添加到Shell的参数个数 
$0 
Shell本身的文件名 



案例:对字符串形式的"yyyy-MM-dd HH:mm:ss"时间进行比较
a:利用date命令比较两个日期的大小，方法是先把日期转换成时间戳格式，再进行比较

date1="2020-4-09 12:00:00"
date2="2020-4-10 15:00:00"

t1=`date -d "$date1" +%s`
t2=`date -d "$date2" +%s`

if [ $t1 -gt $t2 ]; then
    echo "$date1 > $date2"
elif [ $t1 -eq $t2 ]; then
    echo "$date1 == $date2"
else
    echo "$date1 < $date2"
fi


时间的获取:
offset=30
target_date=`date +'%Y%m%d %H:%M' -d "${offset} minutes ago"`
target_day=`date +'%Y%m%d' -d "${offset} minutes ago"`
target_hour=`date +'%H' -d "${offset} minutes ago"`

获取某天在一年当中的天数:
`date -d "200 days ago"  "+%-j"`
- 符号是会把时分秒中无意义的 0 给去掉.
 
