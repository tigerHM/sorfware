记录常用脚本
示例1:遍历输出hdfs某个目录下的文件
#!/usr/bin/python
# -*- coding: UTF-8 -*-
import subprocess

if __name__ == '__main__':
  #subprocess.call("ls -l",shell=True)
  p=subprocess.Popen("hadoop fs -ls -R /flume/hdfs2",shell=True,stdout=subprocess.PIPE)
  out=p.stdout.readlines()
  for line in out:
    #if line.startswith('dr') or line.startswith('-r'):
    if line.startswith('-r'):
      print line.strip()
      
      
示例2:
 #比较时间(参数是字符串类型格式是%Y-%m-%d %H:%M:%S的时间进行比较)
    def time_compare(first_time,second_time):
        print (time.mktime(time.strptime(first_time,"%Y-%m-%d %H:%M:%S")))
        print (time.mktime(time.strptime(second_time, "%Y-%m-%d %H:%M:%S")))
        return int(time.mktime(time.strptime(first_time,"%Y-%m-%d %H:%M:%S"))) - int(time.mktime(time.strptime(second_time,"%Y-%m-%d %H:%M:%S")))

    print (time_compare("2020-07-17 6:32:01", "2020-07-17 9:45:55"))


示例3:
遍历输出文件中内容
    file = open("C:\\Users\\Administrator\\Desktop\collect\\test.txt", "r")
    # print(len(file.readlines()))
    for line in file:
        print line.strip()
    file.close()



示例4:map函数和lamda
map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每一个元素，并把结果作为新的Iterable返回。
匿名函数lambda：是指一类无需定义标识符（函数名）的函数或子程序。
lambda [arg1 [,arg2,.....argn]]:expression


#!/usr/bin/python
# -*- coding: UTF-8 -*-

if __name__ == '__main__':
    def add(x, y, z):
        return x, y, z

    list1 = [1, 2, 3]
    list2 = [1, 2, 3, 4]
    list3 = [1, 2, 3, 4, 5]

    res = map(add, list1, list2, list3)
    print(list(res))

    res2 =map (lambda x,y:(x+y,x*y),list2,list1)
    print(list(res2))
    
结果:
[(1, 1, 1), (2, 2, 2), (3, 3, 3)]
[(2, 1), (4, 4), (6, 9)]


示例4:##获取当前文件的绝对路径和文件名:
basename = os.path.basename(__file__)
print (__file__)
print (basename)

OS模块提供系统文件相关操作,可以参考:https://www.runoob.com/python/os-file-methods.html

python中下划线的使用:
参考:
https://cloud.tencent.com/developer/article/1516883


示例5:获取linux系统信息
import platform

def gefMachineInfo():
    return platform.uname()

示例6:获取linux实时内存信息
import subprocess
import re
def getMemoryInfo():
    cmd = "free"
    p1 = subprocess.Popen(cmd,shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = p1.communicate()
    if p1.returncode != 0:
        return "null"
    memo = output.split("\n")[1]
    return {"MemoryInfo":{"total":re.split(r"[ ]+", memo)[1],"used":re.split(r"[ ]+", memo)[2],"free":re.split(r"[ ]+", memo)[3],"cached":re.split(r"[ ]+", memo)[6]}}


