
测试代码：

public static void main(String[] args) throws Exception{

        String fileName = "test.xlsx";

        // 创建excel文件对象
        XSSFWorkbook wb = new XSSFWorkbook();
        // 创建sheet
        XSSFSheet sheet = wb.createSheet("sheet1");
        //设置单元格保护
        sheet.protectSheet("1111");
        //表头字体
        Font headerFont = wb.createFont();
        headerFont.setFontName("微软雅黑");
        headerFont.setFontHeightInPoints((short) 18);

        sheet.setDefaultColumnWidth(100*320);
        sheet.setDefaultRowHeight((short) (30*20));

        String [] headers={"列1","列2","列3","列4"};

        CellStyle lockedStyle = wb.createCellStyle();
        lockedStyle.setLocked(true);

        CellStyle defaultStyle = wb.createCellStyle();
        defaultStyle.setLocked(false);

        // 生成一种字体
        XSSFFont font = wb.createFont();
        // 设置字体
        font.setFontName("微软雅黑");
        // 设置字体大小
        font.setFontHeightInPoints((short) 12);
        // 字体加粗
        font.setBold(true);
        // 在样式中引用这种字体
        lockedStyle.setFont(font);


        String[] datas = new String[] {"选项1","选项2","选项3"};
        XSSFDataValidationHelper dvHelper = new XSSFDataValidationHelper(sheet);
        XSSFDataValidationConstraint dvConstraint = (XSSFDataValidationConstraint) dvHelper
                .createExplicitListConstraint(datas);

        // 设置数据有效性加载在哪个单元格上,四个参数分别是：起始行、终止行、起始列、终止列
        CellRangeAddressList regions = new CellRangeAddressList(3,2000, 3, 3);
        // 数据有效性对象
        DataValidationHelper help = new XSSFDataValidationHelper((XSSFSheet)sheet);
        DataValidation validation = help.createValidation(dvConstraint, regions);
        sheet.addValidationData(validation);


        XSSFRow row = (XSSFRow) sheet.createRow(0);
        for (int i = 0; i <headers.length ; i++) {

//            sheet.autoSizeColumn(i, true);// 根据字段长度自动调整列的宽度
            XSSFCell cell = row.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(lockedStyle);

        }

        XSSFRow row2 = (XSSFRow) sheet.createRow(1);
        for (int i = 0; i <headers.length ; i++) {

//            sheet.autoSizeColumn(i, true);// 根据字段长度自动调整列的宽度
            XSSFCell cell = row2.createCell(i);
            cell.setCellValue("test");
            cell.setCellStyle(defaultStyle);

        }

        for (int i = 2; i <5000 ; i++
             ) {
            XSSFRow rowx = (XSSFRow) sheet.createRow(i);
        }
        OutputStream out = new FileOutputStream("test.xlsx");
        wb.write(out);
        out.close();
        System.out.println("导出成功");

    }
