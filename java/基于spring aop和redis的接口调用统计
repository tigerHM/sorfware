参考文档:
https://juejin.im/post/5dbbec666fb9a020594d1209

springboot整合redis:
参考文档:https://blog.csdn.net/x631617479/article/details/82380530
https://github.com/winterme/SpringBoot-aop-annotation


代码:(redis配置什么的省略了)
1.首先定义一个自定义注解

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface RequestStatistics {

    /**
     * 当天时间内能访问多少次，默认10次
     * @return
     */
    int count () default 10;
}

2.编写切面类
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.concurrent.TimeUnit;

@Aspect
@Component
public class WebCallAspect {
    private static final Logger logger = LoggerFactory.getLogger(WebCallAspect.class);

    @Autowired
    private AppConfigration appConfigration;

    @Autowired

    private static final String FORMAT_PATTERN_DAY = "yyyy-MM-dd";

    @Pointcut("@annotation(com.dc.test.intercept.REQUERT_IP_LIMIT)")
    public void webLog(){
    }

    @Before(value = "webLog()")
    public void doBefore(JoinPoint joinPoint) throws Throwable {
        // 接收到请求，记录请求内容
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        HttpServletResponse response = attributes.getResponse();
        // 记录下请求内容
        String URL = request.getRequestURL().toString();
        String ip=request.getRemoteAddr();
        logger.info("URL : " + request.getRequestURL().toString());
        logger.info("HTTP_METHOD : " + request.getMethod());
        logger.info("IP : " + request.getRemoteAddr());
        logger.info("CLASS_METHOD : " + joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName());
        logger.info("ARGS : " + Arrays.toString(joinPoint.getArgs()));


        if (appConfigration.redisTemplateInit().hasKey(URL+dateFormat(FORMAT_PATTERN_DAY))) {
            System.out.println("请求次数:"+appConfigration.redisTemplateInit().opsForValue().get(URL+dateFormat(FORMAT_PATTERN_DAY)));
            System.out.println(URL+dateFormat(FORMAT_PATTERN_DAY));
            System.out.println("请求次数:"+appConfigration.redisTemplateInit().opsForValue().get(ip+dateFormat(FORMAT_PATTERN_DAY)));
            System.out.println(ip+dateFormat(FORMAT_PATTERN_DAY));

            int i=Integer.parseInt(appConfigration.redisTemplateInit().opsForValue().get(ip+dateFormat(FORMAT_PATTERN_DAY)).toString());
            if (i >= getimit(joinPoint)){
                response.sendError(400,"请求次数达到上限！");
                return;
            }
            appConfigration.redisTemplateInit().opsForValue().increment(URL+dateFormat(FORMAT_PATTERN_DAY), 1);
            appConfigration.redisTemplateInit().opsForValue().increment(ip+dateFormat(FORMAT_PATTERN_DAY), 1);
        } else {
            appConfigration.redisTemplateInit().opsForValue().set(URL+dateFormat(FORMAT_PATTERN_DAY), "1", 1L, TimeUnit.DAYS);
            appConfigration.redisTemplateInit().opsForValue().set(ip+dateFormat(FORMAT_PATTERN_DAY), "1", 1L, TimeUnit.DAYS);
        }

    }


    @AfterReturning(returning = "ret", pointcut = "webLog()")
    public void doAfterReturning(Object ret) throws Throwable {

    }

    private String dateFormat(String pattern) {
        SimpleDateFormat dateFormat = new SimpleDateFormat(pattern);
        return dateFormat.format(new Date());
    }


    /**
     * 获取切面注解的参数
     *
     * @param joinPoint 切点
     * @return 描述信息
     * @throws Exception
     */
    public int getimit(JoinPoint joinPoint)
            throws Exception {
        String targetName = joinPoint.getTarget().getClass().getName();
        String methodName = joinPoint.getSignature().getName();
        Object[] arguments = joinPoint.getArgs();
        Class targetClass = Class.forName(targetName);
        Method[] methods = targetClass.getMethods();
        int count=0;
        for (Method method : methods) {
            if (method.getName().equals(methodName)) {
                Class[] clazzs = method.getParameterTypes();
                if (clazzs.length == arguments.length) {
                    count = method.getAnnotation(REQUERT_IP_LIMIT.class).count();
                    break;
                }
            }
        }
        return count;
    }

}


3.在需要限制调用的controller 请求方法上添加:
@RequestStatistics(count = 20)

