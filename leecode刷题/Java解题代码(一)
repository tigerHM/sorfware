1.验证回文字符串
题目地址：
import com.google.common.base.CharMatcher;
public class solution {

        public static void main(String[] args) {

//            String str="a .plicement;not A;BGI";
            String str="A man, a plan, a canal: Panama";
            String from = CharMatcher.JAVA_DIGIT.or(CharMatcher.JAVA_LOWER_CASE).or(CharMatcher.JAVA_UPPER_CASE).retainFrom(str).toLowerCase();
            System.out.println(from);
            System.out.println(ishuiwen(from));
        }

    private static boolean ishuiwen(String from) {

        String str = new StringBuilder(from).reverse().toString();

        return (str.equals(from))? true:false;
    }

}

2.输入正整数A,B,求出A,B的最小公倍数
如果输入:5 ,7;最小公倍数是35.
/**
 * 获取最小公倍数
 * @
 */
import java.util.Scanner;
public class Main{
    private static int getMinCommonMul(int num1, int num2) {
        int tmp;
        int m=num1;
        int n=num2;
        if(m<n){
            tmp = n;
            n=m;
            m=tmp;
        }
        int result=0;
        for (int i = m;i > 0 ; i++){
            if(i%m==0 && i%n==0){
                result=i;
                break;
            }
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner in =new Scanner(System.in);
        String strint=in.nextLine();
        String[] ints= strint.split(" ");
        if(ints.length==2){
           int result = getMinCommonMul(Integer.parseInt(ints[0]),Integer.parseInt(ints[1]));
           System.out.println(result);
        }else {
           System.out.println("error input");
        }
    }
}


3.计算一个数字的立方根,不使用库函数
/**
 * 求立方根,不使用库函数
 *
 * @
 */
public class testdemo6 {
    public static void main(String[] args) {
        double value = new BigDecimal(kailifang(216)).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();
        System.out.println(value);
        System.out.println(sqrt(216));;
    }
    private static double kailifang(double num) {
        double x = 1;
        double x1 = x - (x*x*x - num) / (3*x*x);
        while(x - x1 >0.000000001 || x - x1 < -0.000000001){        //判断精度
            x = x1;
            x1 = x - (x*x*x - num) / (3*x*x);
        }
        return x1;

    }

    /**
     * 求平方根
     * @param c
     * @return
     */
    public static double sqrt(double c) {
        if (c < 0) {
            return Double.NaN;
        }

        double e = 1e-15;
        double x = c;
        double y = (x + c / x) / 2;
        while (Math.abs(x - y) > e) {
            x = y;
            y = (x + c / x) / 2;
        }
        return x;
    }

}


4.将一字符串进行反转输出;
使用StringBuffer的reverse()方法



5.验证一个合法的IPv4地址
Parttern.matches("^\\d+\\.\\d+\\.\\d+\\.\\d+$",ip)


6.计算24点:
解答参考:https://blog.csdn.net/qq467215628/article/details/104042321?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1
-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param


7.输入某年某月某日，判断这一天是这一年的第几天？
参考:https://blog.csdn.net/sinat_34814635/article/details/52825471



8.传入一个int型数组，返回该数组能否分成两组，使得两组中各元素加起来的和相等，并且，所有5的倍数必须在其中一个组中，所有3的倍数在另一个组中
（不包括5的倍数），能满足以上条件，返回true；不满足时返回false。 

import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            int n = sc.nextInt();
            int sum1=0, sum2 = 0;
            int count = 0;
            int[] a = new int[n];
            for(int i = 0; i < n; i++){
                int temp = sc.nextInt();
                if(temp % 5 == 0){
                    sum1 += temp;
                }else if(temp % 3 == 0){
                    sum2 += temp;
                }else{
                    a[count++] = temp;
                }
            }
            int sum = Math.abs(sum1 - sum2);
            System.out.println(function(0,count,a,0,sum));
        }
    }
    private static boolean function(int i, int n, int[] a, int result, int sum){
        if(i == n)
            return Math.abs(result) == sum;
        else{
            return function(i+1, n, a, result + a[i], sum) || function(i+1, n, a, result-a[i], sum);
        }
    }
}

9.输入一个double类型的数,输出人民币格式:(中文大写金额数字前应标明“人民币”字样。中文大写金额数字应用壹、贰、叁、肆、伍、陆、柒、捌、玖、拾、佰、仟、万、亿、元、角、分、零、整等字样填写;
中文大写金额数字到“元”为止的，在“元”之后，应写“整字，如￥ 532.00应写成“人民币伍佰叁拾贰元整”。在”角“和”分“后面不写”整字。)
import java.util.*;

/**
 * @
 */
public class testDemo8 {
    private final static char[] NUM = {'零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖', '拾','佰', '仟', '万', '亿'};

    public static void main(String[] args){
        Scanner scanner =new Scanner(System.in);
        double input = scanner.nextDouble();
        System.out.println(transform(input));
    }

    public static String transform(double input){
        long n = (long) input;
        StringBuilder builder=new StringBuilder("人民币");
        if (n > 0) {
            transform(n, builder);
            builder.append('元');
        }
        // 加上0.0001是为了防止d*100发生失真
        int v = (int) (input * 100 - n * 100 + 0.0001);
        int i = v / 10;
        int j = v % 10;
        if (i == 0 && j == 0) {
            builder.append('整');
            return builder.toString();
        }
        if (i != 0) {
            builder.append(NUM[i]).append('角');
        }
        if (j != 0) {
            builder.append(NUM[j]).append('分');
        }
        return builder.toString();
    }

    private static void transform(long n, StringBuilder builder) {
        // 大于一亿
        if (n >= 100000000) {
            long q = n / 100000000;
            long r = n % 100000000;
            transform(q, builder);
            builder.append('亿');
            if (r != 0) {
                transform(r, builder);
            }
        }
        else if (n >= 10000) {
            long q = n / 10000;
            long r = n % 10000;
            transform(q, builder);
            builder.append('万');
            if (r != 0) {
                if (r < 100) {
                    builder.append('零');
                }
                transform(r, builder);
            }
        }
        else if (n >= 1000) {
            long q = n / 1000;
            long r = n % 1000;
            transform(q, builder);
            builder.append('仟');
            if (r != 0) {
                if (r < 100) {
                    builder.append('零');
                }
                transform(r, builder);
            }
        }
        else if (n >= 100) {
            long q = n / 100;
            long r = n % 100;
            transform(q, builder);
            builder.append('佰');
            if (r != 0) {
                if (r < 10) {
                    builder.append('零');
                }
                transform(r, builder);
            }
        }
        else if (n >= 10) {
            long q = n / 10;
            long r = n % 10;
            if (q > 1) {
                transform(q, builder);
            }
            builder.append('拾');
            // 是亿的整数倍
            if (r != 0) {
                transform(r, builder);
            }
        } else {
            builder.append(NUM[(int) n]);
        }
    }
}

10.输入一个单向链表，输出该链表中倒数第k个结点 
题目:https://www.nowcoder.com/practice/54404a78aec1435a81150f15f899417d
import java.io.*;

public class Main {
    public static void main(String[] args) throws Exception{
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        String str;
        while((str=br.readLine())!=null){
            int num=Integer.parseInt(str);
            String[] strs=br.readLine().split(" ");
            String slen=br.readLine();
            int len=Integer.parseInt(slen);
            if(len>0 && num-len>=0){
                System.out.println(strs[num-len]);
            }else{
                System.out.println(0);
            }
        }
    }
}



11.优先队列
/**
 * //向量类 Vector
 * 实现一个优先队列（类似最大堆或者最小堆）
 *
 */
public class Heap {
    private Vector vector=new Vector();

    public Object top() {
        return vector.firstElement();
    }

    //添加
    public void push(int k) {
        //插入放到最后一位 上浮
        vector.addElement(new Integer(k));
        up(vector.size()-1);
    }

    //删除最大值
    public void pop() {
        vector.remove(0);
    }

    //上浮
    private void up(int i) {

        while (i > 0 && ((Integer) vector.elementAt(i / 2) < (Integer) vector.elementAt(i))) {
            Object big = vector.elementAt(i);
            Object small = vector.elementAt(i / 2);
            vector.set(i,small);
            vector.set(i / 2,big);
            up(i /=2);
        }
    }

    private void print(){
        Enumeration elements = vector.elements();
        while (elements.hasMoreElements()){
            System.out.println(elements.nextElement());
        }
    }

    //测试
    public static void main(String[] args) {
        Heap heap = new Heap();

        heap.push(4);
        heap.push(7);
        heap.push(1);
        heap.push(8);
        heap.push(6);

        heap.print();

        heap.top();
        System.out.println(heap.top().toString());

        heap.pop();
        heap.print();
    }
}


/**
 * 贪心算法：贪心法顾名思义就是不断贪心的选取当前最优策略的计算方法。
 *
 * 问题1：货币选择问题
 * 描述：分别有1,5,10,50,100元，分别有5,2,2,3,5张纸币。问若要支付k元，则需要多少张纸币？
 * 分析：优先使用面值大的
 *
 */
public class Tanxin {
    public static void main(String[] args) {

        int[] MONEY={5,2,2,3,5};
        int[] VALUE={1,5,10,50,100};
        Scanner scanner = new Scanner(System.in);
        int data = scanner.nextInt();
        int num=0;

        for (int i = MONEY.length-1; i >=0 ; i--) {
            int c=Math.min(data/VALUE[i],MONEY[i]);
            data=data-VALUE[i]*c;
            num+=c;
        }
        System.out.println(num);
    }
}


