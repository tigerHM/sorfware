1.验证回文字符串
题目地址：
import com.google.common.base.CharMatcher;
public class solution {

        public static void main(String[] args) {

//            String str="a .plicement;not A;BGI";
            String str="A man, a plan, a canal: Panama";
            String from = CharMatcher.JAVA_DIGIT.or(CharMatcher.JAVA_LOWER_CASE).or(CharMatcher.JAVA_UPPER_CASE).retainFrom(str).toLowerCase();
            System.out.println(from);
            System.out.println(ishuiwen(from));
        }

    private static boolean ishuiwen(String from) {

        String str = new StringBuilder(from).reverse().toString();

        return (str.equals(from))? true:false;
    }

}

2.输入正整数A,B,求出A,B的最小公倍数
如果输入:5 ,7;最小公倍数是35.
/**
 * 获取最小公倍数
 * @
 */
public class testdemo5 {
   private static int getMinCommonMul(int num1, int num2) {
        int tmp;
        int m=num1;
        int n=num2;
        if(m<n){
            tmp = n;
            n=m;
            m=tmp;
        }
        int result=0;
        for (int i = m;i > 0 ; i++){
            if(i%m==0 && i%n==0){
                result=i;
                break;
            }
        }
        return result;
    }

    public static void main(String[] args) {
        int mul = getMinCommonMul(328, 7751);
        System.out.println(mul);
    }
}


3.计算一个数字的立方根,不使用库函数
/**
 * 求立方根,不使用库函数
 *
 * @
 */
public class testdemo6 {
    public static void main(String[] args) {
        double value = new BigDecimal(kailifang(216)).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();
        System.out.println(value);
        System.out.println(sqrt(216));;
    }
    private static double kailifang(double num) {
        double x = 1;
        double x1 = x - (x*x*x - num) / (3*x*x);
        while(x - x1 >0.000000001 || x - x1 < -0.000000001){        //判断精度
            x = x1;
            x1 = x - (x*x*x - num) / (3*x*x);
        }
        return x1;

    }

    /**
     * 求平方根
     * @param c
     * @return
     */
    public static double sqrt(double c) {
        if (c < 0) {
            return Double.NaN;
        }

        double e = 1e-15;
        double x = c;
        double y = (x + c / x) / 2;
        while (Math.abs(x - y) > e) {
            x = y;
            y = (x + c / x) / 2;
        }
        return x;
    }

}


4.将一字符串进行反转输出;
使用StringBuffer的reverse()方法



5.验证一个合法的IPv4地址
Parttern.matches("^\\d+\\.\\d+\\.\\d+\\.\\d+$",ip)


6.计算24点:
解答参考:https://blog.csdn.net/qq467215628/article/details/104042321?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param


7.输入某年某月某日，判断这一天是这一年的第几天？
参考:https://blog.csdn.net/sinat_34814635/article/details/52825471
